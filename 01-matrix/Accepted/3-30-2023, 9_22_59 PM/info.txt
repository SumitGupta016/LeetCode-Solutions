{"id":924896072,"lang":"cpp","lang_name":"C++","time":"9 months, 2 weeks","timestamp":1680191579,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/924896072/","is_pending":"Not Pending","title":"01 Matrix","memory":"30.2 MB","code":"class Solution {\npublic:\n    vector<int> DIR = {0, 1, 0, -1, 0};\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        int m = mat.size(), n = mat[0].size();\n        queue<pair<int, int>> q;\n        for (int r = 0; r < m; ++r)\n            for (int c = 0; c < n; ++c)\n                if (mat[r][c] == 0) q.emplace(r, c);\n                else mat[r][c] = -1; \n\n        while (!q.empty()) {\n            auto [r, c] = q.front(); q.pop();\n            for (int i = 0; i < 4; ++i) {\n                int nr = r + DIR[i], nc = c + DIR[i+1];\n                if (nr < 0 || nr == m || nc < 0 || nc == n || mat[nr][nc] != -1) continue;\n                mat[nr][nc] = mat[r][c] + 1;\n                q.emplace(nr, nc);\n            }\n        }\n        return mat;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}