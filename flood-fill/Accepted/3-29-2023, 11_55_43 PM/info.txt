{"id":924393366,"lang":"cpp","lang_name":"C++","time":"9 months, 2 weeks","timestamp":1680114343,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/924393366/","is_pending":"Not Pending","title":"Flood Fill","memory":"14 MB","code":"class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n        int n = image.size();\n        int m = image[0].size();\n        vector<vector<int>> ans = image;\n        queue <pair<int, int>> q;\n        int iniColor = image[sr][sc];\n        ans[sr][sc] = color;\n        q.push({sr, sc});\n        int drow[] = {-1, 0, +1, 0};\n        int dcol[] = {0, +1, 0, -1};\n        while (!q.empty()) {\n            int r = q.front().first;\n            int c = q.front().second;\n            q.pop();\n            for (int i = 0; i < 4; i++) {\n                int nrow = r + drow[i];\n                int ncol = c + dcol[i];\n                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&\n                    ans[nrow][ncol] != color && image[nrow][ncol] == iniColor) {\n                        q.push({nrow, ncol});\n                        ans[nrow][ncol] = color;\n                    }       \n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false,"flag_type":1}