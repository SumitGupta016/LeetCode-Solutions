{"id":961793697,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1685639595,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/961793697/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"38.4 MB","code":"class Solution {\npublic:\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n\n        queue<pair<pair<int,int>,int>>q;\n        q.push({{0,0},1});\n        \n        if(grid[0][0]==1)return -1;\n        \n        if(grid[0][0]==0 && grid.size()==1 && grid[0].size()==1)return 1;\n        \n        vector<vector<bool>>visited(grid.size(),vector<bool>(grid.size(),false));\n        visited[0][0]=true;\n        while(!q.empty())\n        {\n            pair<int,int>p = q.front().first; \n            int x = p.first; \n            int y= p.second; \n            int lengthOfPath = q.front().second; \n            q.pop();\n            \n            vector<pair<int,int>>neighbours = {{0,1}, {0,-1}, {1,0}, {-1,0},\n                                               {1,1}, {-1,-1}, {1,-1}, {-1,1}};\n            \n            for(pair<int,int>neighbour: neighbours)\n            {\n                int newx = neighbour.first + x;\n                int newy = neighbour.second+ y;\n                \n         if(newx>=0 && newy>=0 && newx<grid.size() && newy<grid[0].size() && grid[newx][newy]==0 && !visited[newx][newy]){\n\n                    q.push({{newx,newy},lengthOfPath+1});\n                    visited[newx][newy] = true;\n                    \n                    if(newx==grid.size()-1 && newy==grid[0].size()-1)\n                     return lengthOfPath+1;\n           \n                }      \n            }\n        }\n        \n        return -1;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}