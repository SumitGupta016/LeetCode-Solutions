{"id":927147049,"lang":"cpp","lang_name":"C++","time":"9 months, 1 week","timestamp":1680518701,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/927147049/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7 MB","code":"class MyQueue {\npublic:\n    stack<int>input;\n    stack<int>output;\n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n    \n        input.push(x);        \n    }\n    \n    int pop() {\n        \n        if(output.empty()){\n            while(!input.empty()){\n                output.push(input.top());\n                input.pop();\n            }\n        }\n\n        int x = output.top();\n        output.pop();\n        return x;        \n    }\n    \n    \n    int peek() {\n        if(output.empty()){\n            while(!input.empty()){\n                output.push(input.top());\n                input.pop();\n            }\n        }\n\n        return output.top();\n    }\n    \n    bool empty() {\n         \n        return (input.size() + output.size() == 0);\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"1111111111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false,"flag_type":1}