{"id":929987868,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1680935352,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/929987868/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    unordered_map<Node* , Node*> mp; \n    Node* cloneGraph(Node* node) {\n        if(node == NULL) \n        {\n            return NULL;\n        }\n        \n        if(mp.find(node) == mp.end()) \n        {\n            mp[node] = new Node(node -> val, {}); \n            \n            for(auto adj: node -> neighbors) \n            {\n                mp[node] -> neighbors.push_back(cloneGraph(adj)); \n            }\n        }\n        \n        return mp[node]; \n        \n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}