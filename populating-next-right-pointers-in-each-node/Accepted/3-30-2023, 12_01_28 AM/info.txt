{"id":924396733,"lang":"cpp","lang_name":"C++","time":"9 months, 2 weeks","timestamp":1680114688,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/924396733/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"17.5 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if (!root) return nullptr;\n\n        vector<Node*> level;\n\n        queue<Node*> q;\n\n        q.push(root);\n        q.push(nullptr);\n\n\n        while (!q.empty()) {\n            Node *front = q.front();\n            q.pop();\n\n            if (front == nullptr) {\n                int n = level.size();\n                \n                for (int i=0; i<n-1; i++) level[i]->next = level[i+1];\n\n                level.clear();\n\n                if (!q.empty()) q.push(nullptr);\n\n            } \n            else{\n\n                level.push_back(front);\n\n                if (front->left) q.push(front->left);\n                if (front->right) q.push(front->right);\n            }\n\n        }\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false,"flag_type":1}